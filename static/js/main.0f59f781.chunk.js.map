{"version":3,"sources":["Login.js","service.js","Comments.js","Homepage.js","App.js","serviceWorker.js","index.js"],"names":["Login","state","email","emailValid","isLoaded","items","loginDisabled","handleChange","e","preventDefault","_e$target","target","name","value","_this","setState","Object","defineProperty","word","includes","com","clearForm","loginButtonClick","console","log","axios","get","then","result","data","length","compareData","i","props","history","push","id","this","enableButton","react_default","a","createElement","className","style","textAlign","fontSize","color","Input","type","onChange","placeholder","required","Button","size","onClick","disabled","React","Component","withRouter","Comments","comments","componentDidMount","postId","getPostComments","getCommentsByPostId","postComment","map","comment","key","body","Homepage","userInfo","address","posts","userId","match","params","getUserData","response","getPosts","userAddress","street","suite","city","zipcode","phone","post","title","src_Comments","App","Fragment","react_router","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","react_router_dom","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0f59f781.chunk.js","sourcesContent":["import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport './login.css';\nimport { Input, Button } from \"reactstrap\";\nimport { getByEmail } from \"./service.js\"\n\nclass Login extends React.Component {\n    state = {\n        email: \"\",\n        emailValid: true,\n        isLoaded: false,\n        items: [],\n        loginDisabled: true\n    };\n\n    handleChange = e => {\n        e.preventDefault();\n        //getting value from input\n        const { name, value } = e.target;\n        this.setState({\n            [name]: value\n        });\n        const email = value;\n        // checking email value\n        const word = email.includes(\"@\")\n        const com = email.includes(\".\")\n        if (word && com) {\n            this.setState({ loginDisabled: false });\n        } else {\n            this.setState({ loginDisabled: true })\n        }\n    };\n    clearForm = e => {\n        this.setState({\n            email: \"\",\n            emailValid: true\n        });\n    };\n    loginButtonClick = () => {\n        console.log(\"The login button was clicked\")\n        //calls the axios function to search the api for the email\n        getByEmail(this.state.email).then(\n            (result) => {\n                console.log(\"result\", result)\n                // set state\n                this.setState({\n                    items: result.data\n                })\n                if (result.data.length === 0) {\n                    this.setState({ emailValid: false })\n                }\n                // compare the data that was passed in\n                this.compareData();\n            })\n        // clears the form\n        this.clearForm();\n    }\n    compareData = () => {\n        const items = this.state.items;\n        const email = this.state.email;\n        // looping through the data to see if the values match with what was inputted\n        for (let i = 0; i < items.length; i++) {\n            if (items[i].email === email) {\n                //redirects to the homepage\n                this.props.history.push(\"/\" + items[i].id);\n            } else {\n                console.log(\"no email match\")\n                this.setState({ emailValid: false })\n            }\n        }\n    }\n    render() {\n        const items = this.state.items;\n        const enableButton = this.state.loginDisabled;\n\n        if (!items) {\n            return <h4>Loading...</h4>\n        } else {\n\n            return (\n                <div className=\"container\" >\n                    <div className=\"row\">\n                        <div className=\"col\"></div>\n                        <div className=\"col-6 space\">\n                            <div>\n                                <p style={{ textAlign: \"center\", fontSize: \"2em\" }}> Welcome to Dunder-Mifflin</p>\n                                <p style={{ textAlign: \"center\" }}>\n                                    Welcome to the dunder-mifflin internal network.\n                         <br />\n                                    Please enter a username to view your posts and comments.\n                        </p>\n                            </div>\n                            <div>\n                                {/* Will display message if no match is found */}\n                                {this.state.emailValid ? (<span></span>) : (<p style={{ color: \"red\" }}> Invalid email</p>)}\n\n                                <Input name=\"email\" type=\"email\" value={this.state.email} onChange={this.handleChange} placeholder=\"email\" required />\n\n                                <Button className=\"btn btn-secondary\" size=\"block\" onClick={this.loginButtonClick} disabled={enableButton}> Login</Button>\n                                <span></span>\n                            </div>\n                        </div>\n                        <div className=\"col\"></div>\n                    </div>\n                </div>\n            )\n        }\n\n    }\n}\n\nexport default withRouter(Login);\n","import axios from \"axios\";\n\nexport function getAllFarmers() {\n    return axios.get(\"https://jsonplaceholder.typicode.com/users\")\n}\nexport function getByEmail(email) {\n    return axios.get(\"https://jsonplaceholder.typicode.com/users?email=\" + email)\n}\nexport function getByUserId(id) {\n    return axios.get(\"https://jsonplaceholder.typicode.com/users/\" + id)\n}\nexport function getPostsById(id) {\n    return axios.get(\"https://jsonplaceholder.typicode.com/posts?userId=\" + id)\n}\nexport function getAllComments() {\n    return axios.get(\"https://jsonplaceholder.typicode.com/comments\")\n}\nexport function getCommentsByPostId(postId) {\n    return axios.get(\"https://jsonplaceholder.typicode.com/comments?postId=\" + postId)\n}","import React from \"react\"\nimport { getCommentsByPostId } from \"./service\"\nimport \"./homepage.css\"\n\n\nclass Comments extends React.Component {\n    state = {\n        comments: []\n    }\n    componentDidMount = () => {\n        //calling function and passing post id that was passed as a prop\n        const id = this.props.postId;\n        console.log(\"post id passed\", id)\n        //call the function that will look for the comments of the post that id is being passed in\n        this.getPostComments(id)\n    }\n    getPostComments = (postId) => {\n        getCommentsByPostId(postId).then(comments => {\n            console.log(\"comment for post\", comments.data)\n            this.setState({ postComment: comments.data })\n        })\n    }\n    render() {\n        const comments = this.state.postComment;\n        if (!comments) {\n            return <h4> will display comments soon...</h4>\n        }\n        else {\n            return (<div className=\"post\">\n                {/* this will display all of the comments for specific post id */}\n                {comments && (comments.map(comment =>\n                    <div key={comment.id}>\n                        <p><strong>{comment.name}</strong> </p>\n                        <p>{comment.body} </p>\n                        <hr />\n                    </div>\n                ))}\n            </div>)\n        }\n    }\n}\nexport default Comments;","import React from \"react\"\nimport { getByUserId, getPostsById } from \"./service.js\"\nimport Comments from \"./Comments\"\nimport \"./homepage.css\"\n\nclass Homepage extends React.Component {\n    state = {\n        userInfo: [],\n        address: {},\n        posts: [],\n        comments: []\n    }\n    componentDidMount = () => {\n        const { userId } = this.props.match.params;\n        console.log(userId)\n        //calls function to load page info\n        this.getUserData(userId)\n    }\n    getUserData = (userId) => {\n        //axios call to get user info\n        getByUserId(userId).then(response => {\n            console.log(\"user response\", response.data)\n            this.setState({ userInfo: response.data, address: response.data.address })\n            this.getPosts(response.data.id)\n        })\n    }\n    getPosts = (userId) => {\n        //getting all posts for the user\n        getPostsById(userId).then(posts => {\n            console.log(\"post response\", posts.data)\n            this.setState({ posts: posts.data })\n            console.log(\"passing this id\", this.state.posts)\n        })\n    }\n\n    render() {\n        const userInfo = this.state.userInfo\n        const userAddress = this.state.address\n        console.log(\"user Info\", userInfo, userAddress)\n        const posts = this.state.posts\n        console.log(\"posts\", posts)\n\n        if ((!userInfo && !posts)) {\n            return <h2>Loading...</h2>;\n        } else {\n            return (\n                <div>\n                    <div className=\"main-container\">\n                        <div className=\"left\">\n                            <div className=\"profile-container profileBox\">\n                                {/* Listing out the profile details */}\n                                <div className=\"profile\">Profile Detail<hr /></div>\n                                <div className=\"name\"> <p>{userInfo.name}</p></div>\n                                <div className=\"profile1\"><i className=\"fas fa-map-marker-alt fa-2x\"></i></div>\n                                <div className=\"profile2\"><i className=\"fas fa-phone fa-2x\"></i></div>\n                                <div className=\"profile3\"><i className=\"fas fa-envelope fa-2x\"></i></div>\n\n                                <div className=\"address\"><p>{userAddress.street + \" \" + userAddress.suite}<br />\n                                    {userAddress.city + \" \" + userAddress.zipcode}</p></div>\n                                <div className=\"phone\"><p>{userInfo.phone}</p></div>\n                                <div className=\"email\"><p>{userInfo.email} </p></div>\n                            </div>\n                        </div>\n                        <div className=\"right \">\n                            {posts.map(post =>\n                                <div className=\"divider\" key={post.id}>\n                                    <div className=\"post\" >\n                                        {/* listing out all of the individual posts */}\n                                        <p><strong>{post.title}</strong></p>\n                                        <p>{post.body}</p>\n\n                                    </div >\n                                    {/* calling the component and passing data needed to get all comments for the post */}\n                                    <Comments postId={post.id} />\n                                </div>\n                            )}\n                        </div >\n                    </div>\n                </div>\n            )\n        }\n    }\n}\nexport default Homepage;","import React, { Component } from 'react';\nimport './App.css';\nimport { Route } from \"react-router-dom\"\nimport Login from \"./Login\"\nimport Homepage from \"./Homepage\"\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Route exact path=\"/\" component={Login} />\n        <Route exact path={\"/:userId(\\\\d+)\"} component={Homepage} />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}